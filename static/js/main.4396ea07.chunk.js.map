{"version":3,"sources":["Card.js","Cardlist.js","Scroll.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","className","src","this","props","id","alt","name","email","Component","Cardlist","robots","map","user","i","key","Scroll","style","overflowY","border","height","children","SearchBox","searchFeild","searchChange","type","placeholder","onChange","App","event","setState","target","value","state","fetch","then","response","json","users","robotsFilter","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8OA+BeA,E,uKA1Bb,OACC,yBAAKC,UAAU,oDACd,yBAAKC,IAAG,+BAA0BC,KAAKC,MAAMC,GAArC,YAAmDC,IAAI,KAC/D,6BACC,4BAAKH,KAAKC,MAAMG,MAChB,2BAAIJ,KAAKC,MAAMI,a,GAPDC,aCcJC,EAZE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACC,6BAEEA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGT,GAAIM,EAAOG,GAAGT,GAAIE,KAAMI,EAAOG,GAAGP,KAAMC,MAAOG,EAAOG,GAAGN,aCApEQ,EARA,SAACZ,GACf,OACC,yBAAKa,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEhB,EAAMiB,WCKKC,EARG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aACjC,OACC,yBAAKvB,UAAU,OACd,2BAAOA,UAAU,oCAAoCwB,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MC2C7FI,G,wDAxCd,aAAe,IAAD,8BACb,gBAgBFJ,aAAe,SAACK,GACf,EAAKC,SAAS,CAAEP,YAAaM,EAAME,OAAOC,SAhBxC,EAAKC,MAAQ,CACZtB,OAAQ,GACRY,YAAa,KAJF,E,gEAQM,IAAD,OACnBW,MAAM,8CACJC,MAAK,SAAAC,GACL,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACL,EAAKR,SAAS,CAAEnB,OAAQ2B,S,+BAMhB,IAAD,OACFC,EAAepC,KAAK8B,MAAMtB,OAAO6B,QAAO,SAAA7B,GAC9C,OAAOA,EAAOJ,KAAKkC,cAAcC,SAAS,EAAKT,MAAMV,YAAYkB,kBAEjE,OAAiC,IAA7BtC,KAAK8B,MAAMtB,OAAOgC,OACb,wBAAI1C,UAAU,MAAd,WAGR,yBAAKA,UAAU,MACd,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWuB,aAAcrB,KAAKqB,eAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUb,OAAQ4B,U,GAjCL9B,cCKEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,6BACC,kBAAC,EAAD,QAGHC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4396ea07.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n\nclass Card extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className='bg-light-green dib br3 ma2 grow tc bw2 shadow-5 '>\n\t\t\t\t<img src={`https://robohash.org/${this.props.id}?200x200`} alt='' />\n\t\t\t\t<div>\n\t\t\t\t\t<h2>{this.props.name}</h2>\n\t\t\t\t\t<p>{this.props.email}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t); \n\t}\n}\n\n//TRADITIONAL JAVA\n// const Card = ({ name, id, email }) => { - OR ADD THEM IN THE FUNCTION PARAMATERS, FOR EVEN CLEANER LOOKING CODE! REMOVING THE NEED FOR THE SECOND CONST, But I will leave it for the example.\n//\tconst { name, id, email } = props; - THIS IS ANOTHER WAY OF GETTING THE SAME RESULST, JUST BY USING DESTRUCTURING! \n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt='' /> - THAT GETS THE ID NUMBER OF THE USER AND RANDOMISES THE IMAGE, SO EVERY ROBOT IS DIFFERENT.\n// \t\t\t\t<div>\n// \t\t\t\t\t<h2>{name}</h2>\n// \t\t\t\t\t<p>{email}</p>\n// \t\t\t\t</div>\n// \t\t\t</div>\n// \t\t).\n// }\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n// Each robot can be done one by one, grabbing each index item - <Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />. Or you can do it in a more efficent map loop \n\nconst Cardlist = ({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user, i) => {\n\t\t\t\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\n\t\t\t\t})\n\t\t\t}\n\t    </div>\n\t);\n}\n\nexport default Cardlist;\n\n//With react, and doing something like this, you will have to assign it a key! This is because otherwise the virtual DOM wont remember what it is\n// if it gets deleted, and will delete everything.. By assiging the key, it will remember each indivudual component as a seperate name.\n\n//Because of the way React works, anything that is placed inside of {} is native javascript, even if it uses different syntax which allows you to even\n// Put Javascript inside of the jsx brackets () like in the above code.\n\n// As i am returning everything on one line in the above code, I do not need to wrap what is being returned inside of () - Only done for returning multiple lined code.\n\n//The above code allows you to add as many users (robots) as you want, as the loop will continue going until there is no more robots for it to find.","import React from 'react'\n\nconst Scroll = (props) => { \n\treturn (\n\t\t<div style={{ overflowY: 'scroll', border: '3px solid black', height: '500px' }}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;\n\n// This is allowing ut to wrap whole objects with certain things, this code is allowing us to wrap the card section! \n//And allowing us to enable it to scroll without interfering with anything else on the page. This is because of the props.children tag, Only being able \n// To affect those wrapped in the 'scroll' tag. If confused, look at the udemy react lesson 214\n\n// {{}} - This allows us to add css styling directly into the react files, the single {} is javascript and the double is jsx-css - Must be in a style tag inside the div","import React from 'react';\n\nconst SearchBox = ({ searchFeild, searchChange}) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input className='pa3 ba b--green bg-light est-blue' type='search' placeholder='Search Robots' onChange={searchChange} /> \n\t\t</div> // The onChange, element above, allows what ever paramanter is set from the App to change from what ever input is being received.\n\t);\n}\n\nexport default SearchBox;","import React, { Component }from 'react';\nimport Cardlist from './Cardlist';\nimport Scroll from './Scroll'\nimport SearchBox from './SearchBox' // WHEN RENCDERING A REACT APP, ALL FILES MUST START WITH A CAPITOL LETTER!!!! \n// import { robots } from './robots.js' //IF EXPORTING MULTIPLE COMPONENTS/ITEMS, IT HAS TO BE DE STRUCTURED!\nimport './App.css'\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\t\tthis.state = { // This is what is describing the app! These elements below are something that can change. \n\t\t\t\trobots: [ ],\n\t\t\t\tsearchFeild: ' '\n\t\t};\n\t}\n\ncomponentDidMount() {\n\tfetch('https://jsonplaceholder.typicode.com/users') //Effectlvily this is grabbing the users from a database somewhere else in the world, and updating the website in real time.\n\t\t.then(response => {\n\t\t\treturn response.json()\n\t\t})\n\t\t.then(users => { \n\t\t\tthis.setState({ robots: users})\n\t\t});\n}\nsearchChange = (event) => { // This event is allowing the inputs from the search box to change the displayed cards - When ever the state cant be defined, use arrow functions like in this project.\n\tthis.setState({ searchFeild: event.target.value}); // This is a must do in React for when you want to change a state due to the inputs, in this case, its the value thats been inputted into the searchbar.\n}\n\trender() {\n\t\tconst robotsFilter = this.state.robots.filter(robots => { // This has been added to the render, so that instead of saying this.state.robots i now have access to robotsFilter, which filters all the robots, depending on the input from the user.\n\t\treturn robots.name.toLowerCase().includes(this.state.searchFeild.toLowerCase());\n\t\t})\n\t\tif (this.state.robots.length === 0) { // Based on the time it takes to load the robots, it may put out a loading statment.\n\t\t\treturn  <h1 className='tc'>Loading</h1>\n\t\t} else {\n\t\treturn ( \n\t\t\t<div className='tc'>\n\t\t\t\t<h1 className='f1'>Robo Friends</h1>\n\t\t\t\t<SearchBox searchChange={this.searchChange} />\n\t\t\t\t<Scroll>\n\t\t\t\t\t<Cardlist robots={robotsFilter}/>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\t\n\t}\n}\n\nexport default App;\n\n//Once created/during the process of building an app it is a good idea to clean the code up, and clean the file structure\n//This is so its esasier to read, and easier for outside developers to come in and find the files they need.\n//If needed a reference to this process, react lesson 215\n\n//When wanting to deoply the app, react has a special feature called 'npm run build' this creates an optimised set of folders and minified \n//Code, so that the app is as fast as it possibly can be.\n\n//To make sure that something still happens on the page when an error occurs, you can use errorBounrdy, instead of editing this code heavily\n//Check out react lesson 219 for the full explination/google it. Usefull form when ever creating any app in react. The users of the build\n// Wont see the error report, they will see what the error boundry says to do.","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode> \n  \t\t<div>\n  \t\t\t<App />\n    \t</div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}